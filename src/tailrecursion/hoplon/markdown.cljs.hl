(ns tailrecursion.hoplon.markdown)

(def ^:dynamic *references*           {})
(def ^:dynamic *abbreviations*        {})
(def ^:dynamic *current-table*        nil)
(def ^:dynamic *current-table-header* nil)
(def ^:dynamic *current-table-column* nil)

(defelem abbreviation-node
  [attr kids]
  nil)

(defelem auto-link-node
  [attr [url & _]]
  (a :href url url))

(def block-quote-node     blockquote)
(def bullet-list-node     ul)
(def code-node            code)
(def definition-list-node dl)
(def definition-node      dd)
(def definition-term-node dt)

(defelem exp-image-node
  [{:keys [url title]} [alt & _]]
  (img :src url :title title :alt alt))

(defelem exp-link-node
  [{:keys [url title]} kids]
  (apply a :href url :title title kids))

(defelem header-node
  [{:keys [level]} kids]
  (apply (nth (concat [h6 h1 h2 h3 h4 h5] (repeat h6)) level) kids))

(defelem html-block-node [attr kids]
  )

(defelem inline-html-node [attr kids]
  )

(def list-item-node li)

(defelem mail-link-node [attr kids]
  )

(def ordered-list-node ol)
(def para-node         p)

(defelem quoted-node
  [{:keys [type]} kids]
  (let [q {:double-angle ["\u00AB" "\u00BB"]
           :double       ["\u201C" "\u201D"]
           :single       ["\u2018" "\u2019"]}
        [start end] (q type)]
    (concat [start] kids [end])))

(defelem ref-image-node
  [{rk :reference-key ss :separator-space} [alt & _ :as kids]]
  (let [{:keys [title url]} (*references* rk)]
    (if url
      (img :src url :title title :alt alt)
      (concat ["!["] kids ["]"] (when rk [ss "[" rk "]"])))))

(defelem ref-link-node
  [{rk :reference-key ss :separator-space} kids]
  (let [{:keys [title url]} (*references* rk)]
    (if url
      (a {:href url :title title} kids)
      (concat ["["] kids ["]"] (when rk [ss "[" rk "]"])))))

(defelem reference-node
  [attr kids]
  nil)

(defmulti  simple-node (fn [{:keys [type]} _] type))
(defmethod simple-node :apostrophe [_ _] "'")
(defmethod simple-node :ellipsis   [_ _] "\u2026")
(defmethod simple-node :emdash     [_ _] "\u2014")
(defmethod simple-node :endash     [_ _] "\u2013")
(defmethod simple-node :h-rule     [_ _] (hr))
(defmethod simple-node :linebreak  [_ _] (br))
(defmethod simple-node :nbsp       [_ _] "\u00A0")

(def strike-node del)

(defelem strong-emph-super-node
  [{chars :chars closed? :closed strong? :strong} kids]
  (if-not closed?
    (into [chars] kids)
    (apply (if-not strong? em strong) kids)))

(def table-body-node    tbody)
(def table-caption-node caption)

(defelem table-cell-node [attr kids]
  )

(defelem table-column-node [attr kids]
  )

(defelem table-header-node [attr kids]
  )

(defelem table-node [attr kids]
  )

(defelem table-row-node [attr kids]
  )

(defelem verbatim-node [{:keys [text type]} _]
  (pre (code :class type text))
  )

(defelem wiki-link-node [attr kids]
  (pre (pr-str [attr kids]))
  )

